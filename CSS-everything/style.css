/* We use dashes (-) instead of underscores (_) or capitalizing (marekHostasek) */

/* We can hold the left alt and click wherever we want, so that we can type at multiple places at the same time. */

/* We can use the inspect element to see how the website would look on different devices 
with the second icon to the right in the top left corner */

/* The element selectors overwrite classes and classes overwrite ids */

/* We also use an id when we have multiple elements of the same class e.g. 
we have 3 uls with the class lists and we want to apply some special styles 
to one of them, we can use the id tag on the element, 
that we want to apply the special styling to. */

/* <div><p></p></div> - in this situation the div tag is a parrent of the p tag and the p tag is a child of the div tag. 
There are also grandparents and grandchildren. */

/* Advanced selectors:  h2 + p  - if an h2 is followed by a paragraph and 
they both have the same parent, style the paragraph,
textarea ~ button  - if there is a button and it has the same parent as a textarea, style the button,
ul > li  - if there is an li and its parent is an ul, style the li and
ul li  - if there is an li inside of an ul, style the li. 
Attribute selectors:  a[href="xxx"]  - if there is an a and it has an href value of xxx, style the a,
a[href*="xxx"]  - if there is an a and its href contains xxx, style the a, 
a[href^="xxx"]  - if there is an a and its href starts with xxx, style the a and
a[href$="xxx"]  - if there is an a and its href ends with xxx, style the a. 
Pseudoselectors: They are used at the end of a selector e.g. elementary-tag:xxx, .class:xxx, #id:xxx, 
textarea ~ button:xxx or a[href*="xxx"]:xxx.  :hover  ,  :link  - for an  a,
when a link hasn't yet been visited, apply these styles,  :visited  - for an  a,
when a link has already been visited, apply these styles,  :active  - for an  a,
when you click on a link, apply these styles,  :first-child  -
if the tag is the first child of its parent, apply these styles,
:last-child  - if the tag is the last child of its parent, apply these styles,
:nth-child()  - if the tag is the nth child of its parent, apply these styles, 
:only-child  - if the tag is the only child of its parent, apply these styles. 
And when you have one class for multiple elements, there is a way to differenciate 
between them e.g. there is a class lists which applies for an ul and a ol. 
We can select the ul by saying ul.lists and ol by saying ol.lists.*/

/* body {
    background: url("");
} */

/* Inside of the url function we can use a path to an internal image or a link to an external image. */

body {
    background: rgb(238, 238, 238);
    text-transform: capitalize;
    text-align: justify;
    font-family: 'Segoe UI', sans-serif;
    font-size: 1.02em;
}

/* justify stretches the text so that every line ends at the end of the page (do bloku) */

/* serif - patkové (Times New Roman, Georgia), sans-serif - bezpatkové (Arial, Calibri), 
monospace - all of the letters are of the same size. */

/* font-family takes the font on the left and if it is available it applies it, but if it isn't, 
it applies the font to the right of the one, that is not available. If it reaches the end, 
it looks at the family (serif, sans-serif or monospace) and applies an available font from that family. */

/* We can also include and use external fonts from google fonts and link them 
to out html file, above the css link tag. 
You can only use those weights and styles of that font, that you chose. */

#title {
    color: rgba(16, 86, 143, 0.87);
}

.subtitle {
    color:rgba(23, 118, 196, 0.801);
    font-weight: 400;
}

/* #service-image {
    height: 200px;
    width: 40%;
    background-image: url("img-2.jpg");
    background-color: steelblue;
    background-repeat: no-repeat;
    background-size: cover;
} */

/* The difference between background and background-color or background-image is that 
background can be used for both color and image. */

/* The default value of background-repeat is repeat. */

/* In the background-size property there are two values available. contain stretches the 
image within the image ratio in contrast to cover which stretches the image completely, 
sacrificing some parts of the image. 
You can also just set the width and the height e.g. 50vw 400px. 
You can also use the percentage unit, which represents the width and height of the container 
e.g. 100% 50% - the full width of the container and half of the height of the container. */

/* #service-image {
    height: 200px;
    width: 30%;
    background: linear-gradient(to top left, rgba(0, 89, 255, 0.829), rgba(167, 0, 209, 0.74));
} */

/* We can define the direction of the gradient by predefined names like: 
top, bottom, left, right, top left, bottom right, ... or by degrees e.g. 180deg. 
0deg is in the middle at the top. */

#service-image {
    height: 200px;
    width: 200px;
    background: radial-gradient(circle, rgba(255, 251, 0, 0.842) 10%, rgba(212, 122, 4, 0.938) 60%, rgb(0, 0, 0));
    margin: 25px 10px;
} 

#about-us-image {
    padding: 5px;
    border: 1px solid black;
    margin: 30px;
}

/* The default value of the first value inside of the radial-gradient function call is elipse. */
/* The percentage has to go from lower to higher. */

/* px, pt, pc - pt is a bigger px and a pc is a bigger pt. They are special, 
because they adjust depending on the device that you are on, 
e.g. 1px on my PC will be 4px on a high resolution TV, but there is a catch, until 
the width reaches 1000px they don't adjust, the screen just gets narrower and they don't adjust. 
Then there are absolute units like: mm, cm, in, which don't change and relative units 
like: %, rem, em, vw, vh. % stands for a percentage of the width/height of the parent tag, rem stands 
for how many times we want to amplify the normal size, that the text would have on the page, 
em stands for how many times we want to amplify the normal size, that the text would have 
inside of the container, that it's in and vw and vh stand for a percentage of the screen dimensions. */

/* It's important to set the height and more importantly the width, so that the it fits on every device. 
We use px for height and relative units like vw or % for width. 
Usually we don't want to set the height and width of an image though. 
That's because it doesn't look good when it's stretched and also there is no need to do it, 
because it adjusts it self until it can't without ruining the ratio. We can still set the 
height and width in px though and it still resizes the image acording to the ratio. 
There are also the min-height, max-height, min-width and max-width properties. */

/* There are also these not so much used properties: letter-spacing, word-spacing, 
line-height - the height between rows of text. */

/* First there is padding - the distance between the content and border, 
then border a last there is margin - the distance between the border and the rest of the page. 
We usually set them in px.
We can use them multiple times e.g. margin-right: 10px margin: 50px margin-left: 70px 
and they will overwrite themselfs. So the result will be that all of the sides will 
have a margin of 50px, apart from the left side, which will have a margin of 70px. */

/* padding comes with the background. */

/* There are 4 border styles: solid, double, dotted, dashed. We can also round the border with the border-radius property and 
specify the color of the border or of the section of the border with the border-color property. */

/* There is margin/padding/border:x, which affects all of the sides then there is 
margin/padding/border-top/right/bottom/left, but it can be shorten to margin/padding/border:
top right bottom left, again starting from from the middle at the top or to 
margin/padding/border: top&bottom right&left or to margin/padding/border: top right&left bottom. 
We can also use 0 instead of 0px. */

/* There is a float property which moves stuff around and the place,
where it moves from is filled with the stuff that was below the stuff,
that got moved e.g. float: none - stays the same/inherit - 
inherits the float property from its parent/right - moves to the 
right/left - moves to the left. */

/* The display property has 4 basic values and 2 advanced values: none - the element disappears,
inline - the element is not moved to a new line,
block - the element is moved to a new line and there is some spacing is added to it, 
inline-block - acts like inline, but adds some spacing to the element, flex and grid. */

.link {
    text-decoration: none;
}

.link:hover {
    color: black;
}

.link:active {
    color: black;
}

.paragraph {
    text-indent: 5px;
}

.italics {
    font-style: oblique;
}

.flexbox {
    height: 300px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin: 100px 0 200px 0;
}

/* We can use a shortcut to specify flex-direction and flex-wrap in one by saying flex-flow: flex-direction flex-wrap; */

.flexbox-item {
    width: 200px;
    background: grey;
    color: white;
    line-height: 50px;
    text-align: center;
    font-size: 25px;
    margin: 10px;
}

.grid {
    height: 350px;
    display: grid;
    grid-template-columns: auto auto auto;
    grid-template-rows: auto auto;
    /* justify-content: space-between;
    align-content: space-between; */
    /* grid-row-gap: 50%;
    grid-column-gap: 25%; */
    /* There is also a shortcut for the gaps: grid-gap: row column; */
    margin: 200px 0 100px 0;
}

.grid-item {
    width: 70px;
    color: white;
    line-height: 50px;
    text-align: center;
    font-size: 25px;
    margin: 10px;
}

/* flex-wrap makes sure, that when the elements exceed the width of the page, they won't be adjusted 
(spacing, etc.), but that they will be moved to a new line.

/* We use line-height instead of height in this case, because text-align only affects the x axis 
and we want to center the characters along the y axis as well and if we increase the overall height, 
it doesn't help the case so we increse the height on the top and the bottom with the line-height property. 
By specifying the height we also make the item not responsive, but by specifying the line-height we don't. */


/* The position property has 5 values: static, relative, absolute, fixed, sticky. static - the default value, 
we can't move the element around using the  left  right  top  bottom  properties,
relative - we can move the element around using the  left  right  top  bottom  properties, 
but the space of the element stays in the default location (before moving) of the element, absolute - 
we can move the element around using the  left  right  top  bottom  properties and the space of the element disappears,
fixed - we can move the element around using the  left  right  top  bottom  properties and the element 
will stay in the same place, even when scrolling e.g. ads, it is also absolute, sticky - it will stick 
to the place of the page, that we specify, when we scroll passed it. We can specify the  top  or  bottom  or 
both gaps for it to work e.g. top: 0; or bottom: 0; or top: 50px; or bottom: 50px; or top: 50vh; and bottom: 30vh;, 
it is also relative. */

/* There is a shorthand for  top  right  bottom  left  - inset: top right bottom left; 
or inset: all; or inset: top&bottom right&left or inset: top right&left bottom. */

/* The box-sizing property says, if the specified width and height should include the padding and the border of an element. 
If we want to include them we set the value to border-box and if we don't we set the value to content-box. */

/* The overflow property specifies what to do, when the text on your website overflows the specified area. It has 4 values: 
visible, hidden, scroll, auto - same as scroll, but adds scroll bars only when necessary. There is also the overflow-x and overflow-y property. */

/* The visibility property has 2 values: visible and hidden. */

/* The opacity property goes from 0 to 1. */

/* The cursor property has many values (https://www.w3schools.com/css/tryit.asp?filename=trycss_cursor) and it changes the cursor, 
while hovering over the object that its applied to. */

/* The z-index property defines the z axis of an object e.g. one object has z-index: 1, next one has z-index: 5 and the 
last one has z-index: -1 - The one with z-index: 5 will be above the other ones and so on. The default value is 0 */

.submit-button {
    background: rgba(102, 147, 226, 0.801);
    color: white;
    font-size: 18px;
    font-weight: 600;
    padding: 10px;
    border: none;
    transition: background 250ms ease-in-out;
    -ms-transition: background 250ms ease-in-out;
    -webkit-transition: background 250ms ease-in-out;
    -moz-transition: background 250ms ease-in-out;
    -o-transition: background 250ms ease-in-out;
}

.submit-button:hover {
    background: rgba(95, 122, 170, 0.801);
}

/* The transition property affects all of the pseudo-selectors with the same class / id / ... . 
It accepts 4 values: what - the property, that we want to apply the transition to e.g. all, background, ..., 
the next value is the duration of the transition in s or ms, then the type of the transition - 
linear - same speed, ease - slower in the middle, but not at the start nor at the end, 
ease-in - slower at the start, ease-out - slower at the end, 
ease-in-out - slower at the start and at the end, but not in the middle. 
And the last value is the delay before the transition starts in s or ms (can also be negative - 
some time has already passed since the transition started and if is 0 - we have to use 0s or 0ms or nothing, not just 0), . 
The transition property is a shorthand for the transition-property, 
transition-duration, transition-timing-function and transition-delay properties.
Although there is a catch, because older browsers don't support the transition property, so we have to specify a prefix for them. 
For Microsoft Edge and Internet Explorer it's -ms-, for Google Chrome,  Safari, Android and iOS it's -webkit-, 
for Mozilla Firefox it's -moz- and for Opera it's -o-. */

/* The transform property accepts 13 functions. translate(x, y) / translate(x&y) / translateX(x) / translateY(y) - 
moves the object around by e.g. 50px, -80px - 50px to the right and 80px to the bottom. 
scale(x, y), scale(x&y) / scaleX(x) / scaleY(y) - scales the objects times ... . 
skew(x, y) / skew(x&y) / skewX(x) / skewY(y) - rotates the object along one of the axis e.g. 45deg. 
rotate() - rotates the object e.g. -90deg. There is also a shothand - 
matrix(scaleX - times e.g. 10, skewX - deg e.g. 0.5, skewY - deg e.g. 0.5, scaleY  - times e.g. 10, 
translateX - px e.g. 40, translateY - px e.g. 40). We can use the transformation property and its functions for 
transitions / animations e.g. After we hover over an image, we can smoothly scale it. Although there is a catch, 
because older browsers don't support the transformation property, so we have to specify a prefix for them. 
For Microsoft Edge and Internet Explorer it's -ms-, for Google Chrome,  Safari, Android and iOS it's -webkit-, 
for Mozilla Firefox it's -moz- and for Opera it's -o-. */

#magical-dot {
    width: 25px;
    height: 25px;
    background: black;
    position: fixed;
    bottom: 10px;
    right: 10px;
    border-radius: 5px;
    animation: white-to-black 1s linear -1s infinite alternate-reverse;
    -ms-animation: white-to-black 1s linear -1s infinite alternate-reverse;
    -webkit-animation: white-to-black 1s linear -1s infinite alternate-reverse;
    -moz-animation: white-to-black 1s linear -1s infinite alternate-reverse;
    -o-animation: white-to-black 1s linear -1s infinite alternate-reverse;
}

/* @keyframes acts as a function. It has a name e.g. white-to-black and executes the code inside itself, when called. 
We can call it with the animation property e.g. when we put the animation property inside of a selected class / id / ... 
without a pseudo-selector, the animation executes, when we visit the page or when we refresh it. We can also asign 
animations to a class / id / ... with a pseudo-selector though. Inside of the keyframes, we specify the start of the 
animation with  from  and the end of it with  to   . We can also use percentages instead of  from  and  to  -  
0%  100%  or 0%  50%  100%  or 0%  25%  75%  100%  or 0%  37%  100%  . The only thing to keep in mind is that you have to 
specify how will the website look at 0% (from) and at 100% (to). */

/* The animation property is very similar to the transition property, but it has a few advantages. 
It's execution is not dependent on an event e.g. the animation can be executed, 
when we visit the page or when we refresh and it has more values, that we can input as well as more states 
e.g. not only changing a color to another color, but changing a color to another color, then to another color, ... . 
It accepts 6 values: the name of the animation, the duration for which the animation will play in s or ms, 
the type of the animation - same as for transitions, the delay before the animation
starts in s or ms (can also be negative - some time has already passed since 
the animation started and if is 0 - we have to use 0s or 0ms, not just 0), 
the iteration count - how many times will the animation play e.g. 5, infinite and the direction of the animation: 
normal - from start to end, reverse - from end to start, alternate - from start to end and then from end to start 
(requires the iteration count to be at least 2 to work) and alternate-reverse - from end to start and then from start to end 
(requires the iteration count to be at least 2 to work). The animation property is a shorthand for the animation-name, 
animation-duration, animation-timing-function, animation-delay, animation-iteration-count and animation-direction properties.
Although there is a catch, because older browsers don't support the animation property, so we have to specify a prefix for them. 
For Microsoft Edge and Internet Explorer it's -ms-, for Google Chrome,  Safari, Android and iOS it's -webkit-, 
for Mozilla Firefox it's -moz- and for Opera it's -o-. */

@keyframes white-to-black {
    from {background: rgb(238, 238, 238);}
    to {background: black;}
}

/* There is also @media (condition - width < 500px) {
    code - #magical-dot {
        color: white;
    }
} */

/* Works exactly like an if statement. */