/* We use dashes (-) instead of underscores (_) or capitalizing (marekHostasek) */

/* We can hold the left alt and click wherever we want, so that we can type at multiple places at the same time. */

/* We can use the inspect element to see how the website would look on different devices 
with the second icon to the right in the top left corner */

/* We also use an id when we have multiple elements of the same class e.g. 
we have 3 uls with the class lists and we want to apply some special styles
 to one of them, we can use the id tag on the element, 
 that we want to apply the special styling to. */

/* <div><p></p></div> - in this situation the div tag is a parrent of the p tag and the p tag is a child of the div tag. 
There are also grandparents and grandchildren. */

/* Advanced selectors:  h2 + p  - if an h2 is followed by a paragraph, style the paragraph,
textarea ~ button  - if there is a button and it has the same parent as a textarea, style the button,
ul > li  - if there is an li and its parent is an ul, style the li and
ul li  - if there is an li inside of an ul, style the li. 
Attribute selectors:  a[href="xxx"]  - if there is an a and it has an href value of xxx, style the a,
a[href*="xxx"]  - if there is an a and its href contains xxx, style the a, 
a[href^="xxx"]  - if there is an a and its href starts with xxx, style the a and
a[href$="xxx"]  - if there is an a and its href ends with xxx, style the a. 
Pseudoselectors: They are used at the end of a selector e.g. elementary-tag:xxx, .class:xxx, #id:xxx, 
textarea ~ button:xxx or a[href*="xxx"]:xxx.  :hover  ,  :link  - for an  a,
when a link hasn't yet been visited, apply these styles,  :visited  - for an  a,
when a link has already been visited, apply these styles,  :active  - for an  a,
when you click on a link, apply these styles,  :first-child  -
if the tag is the first child of its parent, apply these styles,
:last-child  - if the tag is the last child of its parent, apply these styles,
:nth-child()  - if the tag is the nth child of its parent, apply these styles, 
:only-child  - if the tag is the only child of its parent, apply these styles. 
And when you have one class for multiple elements, there is a way to differenciate 
between them e.g. there is a class lists which applies for an ul and a ol. 
We can select the ul by saying ul.lists and ol by saying ol.lists.*/

/* body {
    background: url("");
} */

/* Inside of the url function we can use a path to an internal image or a link to an external image. */

body {
    background: rgb(238, 238, 238);
    text-transform: capitalize;
    text-align: justify;
    font-family: 'Segoe UI', sans-serif;
    font-size: 1.02em;
}

/* justify stretches the text so that every line ends at the end of the page (do bloku) */

/* serif - patkové (Times New Roman, Georgia), sans-serif - bezpatkové (Arial, Calibri), 
monospace - all of the letters are of the same size. */

/* font-family takes the font on the left and if it is available it applies it, but if it isn't, 
it applies the font to the right of the one, that is not available. If it reaches the end, 
it looks at the family (serif, sans-serif or monospace) and applies an available font from that family. */

/* We can also include and use external fonts from google fonts and link them 
to out html file, above the css link tag. 
You can only use those weights and styles of that font, that you chose. */

#title {
    color: rgba(16, 86, 143, 0.87);
}

.subtitle {
    color:rgba(23, 118, 196, 0.801);
    font-weight: 400;
}

/* #service-image {
    height: 200px;
    width: 40%;
    background-image: url("img-2.jpg");
    background-color: steelblue;
    background-repeat: no-repeat;
    background-size: cover;
} */

/* The difference between background and background-color or background-image is that 
background can be used for both color and image. */

/* The default value of background-repeat is repeat. */

/* In the background-size property there are two values available. contain stretches the 
image within the image ratio in contrast to cover which stretches the image completely, 
sacrificing some parts of the image. 
You can also just set the width and the height e.g. 50vw 400px. 
You can also use the percentage unit, which represents the width and height of the container 
e.g. 100% 50% - the full width of the container and half of the height of the container. */

/* #service-image {
    height: 200px;
    width: 30%;
    background: linear-gradient(to top left, rgba(0, 89, 255, 0.829), rgba(167, 0, 209, 0.74));
} */

/* We can define the direction of the gradient by predefined names like: 
top, bottom, left, right, top left, bottom right, ... or by degrees e.g. 180deg. 
0deg is in the middle at the top. */

#service-image {
    height: 200px;
    width: 200px;
    background: radial-gradient(circle, rgba(255, 251, 0, 0.842) 10%, rgba(212, 122, 4, 0.938) 60%, rgb(0, 0, 0));
    margin: 25px 0;
} 

#about-us-image {
    padding: 5px;
    border: 1px solid black;
    margin: 30px;
}

/* The default value of the first value inside of the radial-gradient function call is elipse. */
/* The percentage has to go from lower to higher. */

/* px, pt, pc - pt is a bigger px and a pc is a bigger pt. They are special, 
because they adjust depending on the device that you are on, 
e.g. 1px on my PC will be 4px on a high resolution TV. Then there are absolute units like: 
are mm, cm, in and relative units like: %, em, vw, vh. % stands for a percentage 
of the width/height of the parent tag, em stands for how many times we want to amplify 
the size and vw and vh stand for a percentage of the screen dimentions. */

/* It's important to set the height and more importantly the width, so that the it fits on every device. 
We use px for height and relative units like vw or % for width. 
Usually we don't want to set the height and width of an image though. 
That's because it doesn't look good when it's stretched and also there is no need to do it, 
because it adjusts it self until it can't without ruining the ratio. We can still set the 
height and width in px though and it still resizes the image acording to the ratio. */

/* There are also these not so much used properties: letter-spacing, word-spacing, 
line-height - the height between rows of text. */

/* First there is padding - the distance between the content and border, 
then border a last there is margin - the distance between the border and the rest of the page. 
We usually set them in px.
We can use them multiple times e.g. margin-right: 10px margin: 50px margin-left: 70px 
and they will overwrite themselfs. So the result will be that all of the sides will 
have a margin of 50px, apart from the left side, which will have a margin of 70px. */

/* There are 4 border styles: solid, double, dotted, dashed. We can also round the border with the border-radius property. */

/* padding comes with the background. */

/* There is margin/padding:x, which affects all of the sides then there is 
margin/padding-top/right/bottom/left, but it can be shorten to margin/padding:
top right bottom left, again starting from from the middle at the top or to 
margin/padding: top&bottom right&left. We can also use 0 instead of 0px */

/* There is a float property which moves stuff around and the place,
where it moves from is filled with the stuff that was below the stuff,
that got moved e.g. float: none - stays the same/inherit - 
inherits the float property from its parent/right - moves to the 
right/left - moves to the left. */

/* The display property has 4 basic values and 2 advanced values: none - the element disappears,
inline - the element is not moved to a new line,
block - the element is moved to a new line and there is some spacing is added to it, 
inline-block - acts like inline, but adds some spacing to the element, flex and grid. */

.link {
    text-decoration: none;
}

.link:hover {
    color: black;
}

.link:active {
    color: black;
}

.paragraph {
    text-indent: 5px;
}

.italics {
    font-style: oblique;
}

.flexbox {
    height: 300px;
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    align-items: center;
    margin: 100px 0 200px 0;
}

.flexbox-item {
    width: 200px;
    background: grey;
    color: white;
    line-height: 50px;
    text-align: center;
    font-size: 25px;
    margin: 10px;
}

.grid {
    height: 350px;
    display: grid;
    grid-template-columns: auto auto auto;
    grid-template-rows: auto auto;
    /* justify-content: space-between;
    align-content: space-between; */
    /* grid-row-gap: 50%;
    grid-column-gap: 25%; */
    /* There is also a shortcut for the gaps: grid-gap: row column; */
    margin: 200px 0 100px 0;
}

.grid-item {
    width: 70px;
    color: white;
    line-height: 50px;
    text-align: center;
    font-size: 25px;
    margin: 10px;
}

/* We use line-height instead of height in this case, because text-align only affects the x axis 
and we want to center the characters along the y axis as well and if we increase the overall height, 
it doesn't help the case so we increse the height on the top and the bottom with the line-height property. */

/* flex-wrap makes sure, that when the elements exceed the width of the page, they won't be adjusted 
(spacing, etc.), but that they will be moved to a new line.